<?xml version="1.0" encoding="utf-8"?>
<configuration>
	<appSettings>
		<!-- Prevent ASP.NET Web Pages from registering itself at runtime as an IIS module and then handling .cshtml no matter what we specify in this config file.
		See http://stackoverflow.com/a/6487815/35349 and http://stackoverflow.com/a/6487792/35349. -->
		<add key="webpages:Enabled" value="false" />
	</appSettings>
	<system.web>
		<compilation debug="true" targetFramework="4.7.2" />
		<customErrors mode="RemoteOnly" />
		<httpRuntime executionTimeout="900" maxRequestLength="131072" requestPathInvalidCharacters="" requestValidationMode="2.0" targetFramework="4.7.2" />
		<sessionState mode="InProc" timeout="@@SessionTimeout" />
	</system.web>
	<system.webServer>
		<!-- Unfortunately, the doAppInitAfterRestart attribute does NOT cause preloading after an application restart. It merely causes the "splash screen" (i.e.
		remapManagedRequestsTo) page and maybe the initialization pages to also be used when the first request comes in after an application restart within an
		already-running application pool. Since we're not using these features, the attribute currently has no effect. -->
		<applicationInitialization doAppInitAfterRestart="true" />

		<defaultDocument enabled="false" />
		<modules runAllManagedModulesForAllRequests="true">
			<clear />
			<add name="AnonymousAuthenticationModule" />
			<add name="ApplicationInitializationModule" />
			<add name="ConfigurationValidationModule" />
			<add name="CustomErrorModule" />
			<add name="DynamicCompressionModule" />
			<!--<add name="HttpLoggingModule" />-->
			<add name="ProtocolSupportModule" />
			<add name="RequestFilteringModule" />
			<add name="Session" type="System.Web.SessionState.SessionStateModule" />
			<add name="ServiceModel-4.0"
			     type="System.ServiceModel.Activation.ServiceHttpModule, System.ServiceModel.Activation, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
			<add name="UrlRoutingModule-4.0" type="System.Web.Routing.UrlRoutingModule" />
			@@CertificateAuthenticationModulePlace
		</modules>
		<handlers>
			<clear />

			<add preCondition="integratedMode,runtimeVersionv4.0" name="svc-Integrated-4.0" path="*.svc" verb="*"
			     type="System.ServiceModel.Activation.ServiceHttpHandlerFactory, System.ServiceModel.Activation, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />

			<add preCondition="integratedMode,runtimeVersionv4.0" name="TRACEVerbHandler" path="*" verb="TRACE" modules="ProtocolSupportModule" requireAccess="None" />
			<add preCondition="integratedMode,runtimeVersionv4.0" name="OPTIONSVerbHandler" path="*" verb="OPTIONS" modules="ProtocolSupportModule" requireAccess="None" />
		</handlers>
		<security>
			<requestFiltering allowDoubleEscaping="true">
				<requestLimits maxAllowedContentLength="134217728" />
			</requestFiltering>
		</security>

		<!-- This may have fixed an obscure bug that happens with client certificate authentication. We are not sure. -->
		<serverRuntime uploadReadAheadSize="8388608" />

		<!-- The only known problem with this is downloads of files in IE with the application/x-zip-compressed content type. -->
		<urlCompression doDynamicCompression="true" doStaticCompression="true" dynamicCompressionBeforeCache="true" />
	</system.webServer>
</configuration>